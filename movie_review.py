# -*- coding: utf-8 -*-
"""movie_review.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/Blue554/Project_Movie/blob/main/movie_review.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
# %%bash
# apt-get update
# apt-get install g++ openjdk-8-jdk python-dev python3-dev
# pip3 install JPype1
# pip3 install konlpy

# Commented out IPython magic to ensure Python compatibility.
# %env JAVA_HOME "/usr/lib/jvm/java-8-openjdk-amd64"

"""# 8장. 텍스트빈도분석 - 2) 한글 단어 분석

## 한글 단어 분석을 위한 패키지 준비
"""

import json
import re

from konlpy.tag import Okt

from collections import Counter

import matplotlib
import matplotlib.pyplot as plt
from matplotlib import font_manager, rc
from wordcloud import WordCloud

"""# 1. 데이터 준비

### 1-1. 파일 읽기
"""

inputFileName = '/content/movie_review'
data = json.loads(open(inputFileName+'.json', 'r', encoding='utf-8').read())
data #출력하여 내용 확인

"""### 1-2. 분석할 데이터 추출"""

message = ''

for item in data:
#    if 'message' in item.keys(): 
#        message = message + re.sub(r'[^\w]', ' ', item['message']) +''
    if 'sentence' in item.keys(): 
        message = message + re.sub(r'[^\w]', ' ', str(item['sentence'])) +''
        
message #출력하여 내용 확인



"""### 1-3. 품사 태깅 : 명사 추출"""

nlp = Okt()
message_N = nlp.nouns(message)
message_N   #출력하여 내용 확인

"""## 2. 데이터 탐색

### 2-1. 단어 빈도 탐색
"""

count = Counter(message_N)

count   #출력하여 내용 확인

word_count = dict()

for tag, counts in count.most_common(80):
    if(len(str(tag))>1):
        word_count[tag] = counts
        print("%s : %d" % (tag, counts))

"""### 히스토그램"""

!apt-get update -qq
!apt-get install fonts-nanum* -qq

import matplotlib.font_manager as fm
font_path = "/usr/share/fonts/truetype/nanum/NanumGothicEco.ttf"
font_name = fm.FontProperties(fname = font_path).get_name()
matplotlib.rc('font', family=font_name)
fm._rebuild()

plt.figure(figsize=(12,5))
plt.xlabel('키워드')
plt.ylabel('빈도수')
plt.grid(True)

sorted_Keys = sorted(word_count, key=word_count.get, reverse=True)
sorted_Values = sorted(word_count.values(), reverse=True)

plt.bar(range(len(word_count)), sorted_Values, align='center')
plt.xticks(range(len(word_count)), list(sorted_Keys), rotation='75')

plt.show()

"""### 워드클라우드"""

wc = WordCloud(font_path, background_color='ivory', width=800, height=600)
cloud=wc.generate_from_frequencies(word_count)

plt.figure(figsize=(8,8))
plt.imshow(cloud)
plt.axis('off')
plt.show()

cloud.to_file(inputFileName + '_cloud.jpg')

